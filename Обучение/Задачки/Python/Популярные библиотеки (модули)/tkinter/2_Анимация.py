from tkinter import *
from tkinter.colorchooser import *

root = Tk()
root.title("–•–æ–ª—Å—Ç")
root.geometry("600x400")
root['bg'] = 'gray75'

canvas = Canvas(root, width=540, height=400, bg="white")
canvas.grid(row=0, column=0, rowspan=7)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —Ä–∞–∑–º–µ—Ä –∏ —Ü–≤–µ—Ç —Ä—É—á–∫–∏
brush = 10
color = 'red'

size_pen = Label(root, text=brush, fg=color, font='None 32')
size_pen.grid(row=6, column=1)


def choose(input):
    global state, brush

    if input == "plus" and brush < 98:
        brush += 2
        size_pen.configure(text=brush)
        return

    elif input == "minus" and brush > 0:
        brush -= 2
        size_pen.configure(text=brush)
        return

    state = input


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Ñ—É–Ω–∫—Ü–∏—é choose –∏—Å–ø–æ–ª—å–∑—É–µ–º lambda —Ñ—É–Ω–∫—Ü–∏—é
square_btn = Button(root, text="üü•", font=(None, 20), command=lambda: choose('square'))
circle_btn = Button(root, text="üî¥", font=(None, 20), command=lambda: choose("circle"))
line1_btn = Button(root, text=" ‚Üò ", font=(None, 20), command=lambda: choose("line1"))
line2_btn = Button(root, text=" ‚Üô ", font=(None, 20), command=lambda: choose("line2"))
plus_btn = Button(root, text="‚ûï", font=(None, 20), command=lambda: choose("plus"))
minus_btn = Button(root, text="‚ûñ", font=(None, 20), command=lambda: choose("minus"))

# –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
square_btn.grid(row=0, column=1)
circle_btn.grid(row=1, column=1)
line1_btn.grid(row=2, column=1)
line2_btn.grid(row=3, column=1)
plus_btn.grid(row=4, column=1)
minus_btn.grid(row=5, column=1)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
def paint(event):
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ –Ω–∞ —Ö–æ–ª—Å—Ç–µ, —Ç–æ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.
    if event.widget.__class__ is not Canvas:
        return

    if state == 'circle':
        canvas.create_oval(event.x - brush,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ x1
                           event.y - brush,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ y1
                           event.x + brush,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ x2
                           event.y + brush,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ y2
                           fill=color,  # –¶–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏
                           outline=color)  # –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
    elif state == "square":
        canvas.create_rectangle(event.x - brush,
                                event.y - brush,
                                event.x + brush,
                                event.y + brush,
                                fill=color,
                                outline=color)
    elif state == "line1":
        canvas.create_line(event.x - brush,
                           event.y - brush,
                           event.x + brush,
                           event.y + brush,
                           fill=color)
    elif state == "line2":
        canvas.create_line(event.x + brush,
                           event.y - brush,
                           event.x - brush,
                           event.y + brush,
                           fill=color)
    print(event.__dict__)


# –ë–∏–Ω–¥ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∏–∫
root.bind_all('<1>', paint)
root.bind_all("<B1-Motion>", paint)


# –§—É–Ω–∫—Ü–∏—è –ª–∞—Å—Ç–∏–∫–∞
def erase(event):
    canvas.create_oval(event.x - brush * 2,
                       event.y - brush * 2,
                       event.x + brush * 2,
                       event.y + brush * 2,
                       fill="white",
                       outline="white")


root.bind_all("<3>", erase)
root.bind_all("<B3-Motion>", erase)

root.mainloop()
