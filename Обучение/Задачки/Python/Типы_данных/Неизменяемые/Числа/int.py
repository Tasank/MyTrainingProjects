"""
integer - Целое число
1) При создании - Python поддерживает как десятичные, так и другие системы счисления.
Например, восьмеричные числа можно задавать с префиксом 0o,
а шестнадцатеричные — с префиксом 0x: octal = 0o12 (что соответствует 10 в десятичной системе),
hexadecimal = 0xA (что соответствует 10)

2) - В отличие от многих других языков программирования, в Python нет фиксированного размера для типа int.
Он может расти по мере необходимости, что позволяет работать с очень большими целыми числами,
ограниченными только объемом доступной памяти

3) Можно производить сравнения и арифметические операции между целыми числами

4)  Битовые операции:
   - Python поддерживает побитовые операции, такие как & (AND), | (OR), ^ (XOR), ~ (NOT),
   << (сдвиг влево) и >> (сдвиг вправо), что позволяет манипулировать двоичными представлениями целых чисел.

5) Целые числа могут использоваться в качестве индексов для списков, кортежей и других коллекций,

6) В Python также поддерживаются комплексные числа с типом complex, которые могут включать целую часть.
Например: z = 3 + 4j

7) Python имеет множество библиотек, которые могут работать с числами,
такими как math для математических операций или random для генерации случайных целых чисел.

8)Позиционная система счисления — система счисления,
в которой значение цифры в записи числа зависит от её позиции в числе.  5
Например, привычная для нас, десятичная система счисления является позиционной.
"""
num = 51 # десятичная система
print(f'{num:b}') # b - двоичная система
print(f'{num:o}') # o - восьмеричная система
print(f'{num:x}', end='\n\n') # x - шестнадцатеричная система

# Позиционная система счисления
num = 0b1010
print(num, end='\n\n')

# Арифметические операции
num_2 = 11
print(num + num_2)
print(num % num_2) # Остаток от деления
print(num // num_2) # Целая часть от деления
print(num ** num_2) # Возведение в степень